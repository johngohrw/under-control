// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Transaction {
  id              String         @id @default(cuid())
  date            DateTime
  amount          Int
  memo            String?
  category        Category?      @relation(fields: [categoryId], references: [id])
  categoryId      String?
  user            User?          @relation(fields: [userId], references: [id])
  userId          String?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?
  currency        Currency?      @relation(fields: [currencyId], references: [id])
  currencyId      String?
  createdAt       DateTime       @default(now())
}

model Category {
  id           String        @id @default(cuid())
  name         String
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?
  color        String?
  transactions Transaction[]
}

model PaymentMethod {
  id           String        @id @default(cuid())
  name         String
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?
  transactions Transaction[]
}

model Currency {
  id           String        @id @default(cuid())
  name         String
  code         String
  transactions Transaction[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?       @map("email_verified")
  image          String?
  createdAt      DateTime        @default(now()) @map(name: "created_at")
  updatedAt      DateTime        @updatedAt @map(name: "updated_at")
  accounts       Account[]
  sessions       Session[]
  transactions   Transaction[]
  categories     Category[]
  paymentMethods PaymentMethod[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
